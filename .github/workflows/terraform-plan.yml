name: Terraform Plan

on:
  pull_request: 
    branches: [main]

permissions: 
  pull-requests: write
      
jobs:
  plan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.4
          terraform_wrapper: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Adjust to your AWS region

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_aws_region: ${{ vars.TF_VAR_aws_region }}
          TF_VAR_vpc_cidr: ${{ vars.TF_VAR_vpc_cidr }}
          TF_VAR_instance_type: ${{ vars.TF_VAR_instance_type }}
          TF_VAR_ami_id: ${{ vars.TF_VAR_ami_id }}
          TF_VAR_db_instance_class: ${{ vars.TF_VAR_db_instance_class }}
          TF_VAR_db_name: ${{ vars.TF_VAR_db_name }}
          TF_VAR_db_username: ${{ secrets.TF_VAR_db_username }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
          TF_VAR_bucket_name: ${{ secrets.TF_VAR_bucket_name }}
        run: |
          terraform plan -no-color \
          -var="aws_region=${TF_VAR_aws_region}" \
          -var="vpc_cidr=${TF_VAR_vpc_cidr}" \
          -var="instance_type=${TF_VAR_instance_type}" \
          -var="ami_id=${TF_VAR_ami_id}" \
          -var="db_instance_class=${TF_VAR_db_instance_class}" \
          -var="db_name=${TF_VAR_db_name}" \
          -var="db_username=${TF_VAR_db_username}" \
          -var="db_password=${TF_VAR_db_password}" \
          -var="bucket_name=${TF_VAR_bucket_name}" \
          -input=false | tee plan.txt
          exit ${PIPESTATUS[0]}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`hcl
            ${plan}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1