name: Manual Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        type: string

permissions:
  contents: read
  issues: write

jobs:
  destroy:
    runs-on: ubuntu-latest
    if: inputs.confirm_destroy == 'DESTROY'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.9.4'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_aws_region }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      id: destroy
      run: |
        terraform destroy -auto-approve \
        -var="aws_region=${{ vars.TF_VAR_aws_region }}" \
        -var="vpc_cidr=${{ vars.TF_VAR_vpc_cidr }}" \
        -var="instance_type=${{ vars.TF_VAR_instance_type }}" \
        -var="ami_id=${{ vars.TF_VAR_ami_id }}" \
        -var="db_instance_class=${{ vars.TF_VAR_db_instance_class }}" \
        -var="db_name=${{ vars.TF_VAR_db_name }}" \
        -var="db_username=${{ secrets.TF_VAR_db_username }}" \
        -var="db_password=${{ secrets.TF_VAR_db_password }}" \
        -var="bucket_name=${{ secrets.TF_VAR_bucket_name }}"

    - name: Debug Permissions
      run: |
        echo "GitHub token permissions:"
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/rate_limit

    - name: Create Issue
      uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const status = '${{ job.status }}';
          const outcome = status === 'success' ? 'completed successfully' : 'failed';
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Terraform Destroy Results',
            body: `## Terraform Destroy Results
            
            Status: ${status}
            
            Infrastructure destruction ${outcome}.
            
            Commit: ${{ github.sha }}
            Destroyed by: @${{ github.actor }}
            Action: Manual Trigger`
          });